--we can remove the bing custom search api key from azure
Need to run update version in console app
Need to update azure functions v2
Need to update functions



--need to do when we transfer to new scoring system.
need to run in case we want to change the Score system to transactions count
first run the first update statement until all records have been updated and 
then run the second update for all tire1 users
begin tran
update top(10000) U
set Score = (select count(1) 
			from sb.[Transaction] 
			where TransactionType in ('Question', 'Document') 
				and Price > 0 
				and [Type] = 'Earned'
				and U.Id = [User_Id]
			)
from sb.[User] U 
where Score != (select count(1) 
			from sb.[Transaction] 
			where TransactionType in ('Question', 'Document') 
				and Price > 0 
				and [Type] = 'Earned'
				and U.Id = [User_Id]
			)


begin tran
update top(5000) U
set Score = Score + 2
from sb.[User] U 
where U.Country in ('US', 'CA', 'AU' , 'GB', 'IE', 'IL', 'NZ', 'MX', 'SE' , 'NO', 'DK', 'FI', 'NL', 'BE','LU','DE','CH','AT','ZA')
and Score != 2 + (select count(1) 
			from sb.[Transaction] 
			where TransactionType in ('Question', 'Document') 
				and Price > 0 
				and [Type] = 'Earned'
				and U.Id = [User_Id]
			)
commit
rollback
set CourseId2 = (select id from sb.Course2 C where Q.CourseId = C.Name)




--Tags
Create table sb.Tag2 (Id bigint primary key NOT NULL, [Name] nvarchar(150) not null, [Count] int not null)


CREATE SEQUENCE Test.Tag
    START WITH 1  
    INCREMENT BY 1 ;  
GO  

insert into sb.Tag2
select NEXT VALUE FOR Test.Tag ,Name, [Count]
from sb.Tag

CREATE NONCLUSTERED INDEX IX_Tage_Name 
    ON sb.Tag2 ([Name]);



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [sb].[UsersTags2](
	[UserId] [bigint] NOT NULL,
	[TagId] [bigint] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[TagId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [sb].[UsersTags2]  WITH CHECK ADD  CONSTRAINT [Tags_User2] FOREIGN KEY([TagId])
REFERENCES [sb].[Tag2] ([ID])
GO

ALTER TABLE [sb].[UsersTags2] CHECK CONSTRAINT [Tags_User2]
GO

ALTER TABLE [sb].[UsersTags2]  WITH CHECK ADD  CONSTRAINT [User_Tags2] FOREIGN KEY([UserId])
REFERENCES [sb].[User] ([Id])
GO

ALTER TABLE [sb].[UsersTags2] CHECK CONSTRAINT [User_Tags2]
GO





--create [sb].[DocumentsTags2]
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [sb].[DocumentsTags2](
	[DocumentId] [bigint] NOT NULL,
	[TagId] [bigint] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentId] ASC,
	[TagId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [sb].[DocumentsTags2]  WITH CHECK ADD  CONSTRAINT [Document_Tags2] FOREIGN KEY([DocumentId])
REFERENCES [sb].[Document] ([Id])
GO

ALTER TABLE [sb].[DocumentsTags2] CHECK CONSTRAINT [Document_Tags2]
GO

ALTER TABLE [sb].[DocumentsTags2]  WITH CHECK ADD  CONSTRAINT [Tags_Documents2] FOREIGN KEY([TagId])
REFERENCES [sb].[Tag2] ([Id])
GO


ALTER TABLE [sb].[DocumentsTags2] CHECK CONSTRAINT [Tags_Documents2]
GO


insert into [sb].[HiLoGenerator] ([TableName], NextHi)
values('Tag', (select max(id)+1 from sb.Tag2))
