using Cloudents.Core.DTOs;
using Cloudents.Core.Entities.Db;
using Cloudents.Core.Enum;
using Cloudents.Core.Interfaces;
using Cloudents.Core.Query;
using NHibernate;
using NHibernate.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Cloudents.Infrastructure.Database.Query
{
    [SuppressMessage("ReSharper", "UnusedMember.Global", Justification = "Ioc inject")]
    public class UserProfileQueryHandler : IQueryHandler<UserDataByIdQuery, UserProfileDto>
    {
        private readonly ISession _session;

        public UserProfileQueryHandler(QuerySession session)
        {
            _session = session.Session;
        }

        public async Task<UserProfileDto> GetAsync(UserDataByIdQuery query, CancellationToken token)
        {
            var futureDto = _session.Query<User>()
                 .Fetch(u => u.University)
                 .Where(w => w.Id == query.Id)
                 .Select(s => new UserProfileDto
                 {
                         Id = s.Id,
                         Image = s.Image,
                         Name = s.Name,
                         UniversityName = s.University.Name
                 })
                 .ToFutureValue();
<<<<<<< HEAD
=======
            var futureQuestions = _session.Query<Question>()
                .Where(w => w.User.Id == query.Id)
                .Where(w => w.State == null || w.State == ItemState.Ok)
                .OrderByDescending(o => o.Id)
                .Select(s => new QuestionFeedDto(s.Id,
                    s.Subject,
                    s.Price,
                    s.Text,
                    s.Attachments,
                    s.Answers.Count,
                    s.Updated,
                    s.Color, s.CorrectAnswer.Id != null, s.Language)
                ).ToFuture();
>>>>>>> 902436446a0979dbdf76e6ebf763d70b469f6a4b

            return await futureDto.GetValueAsync(token).ConfigureAwait(false);
        }
    }
}