<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCourse" xml:space="preserve">
    <value>Add a class</value>
  </data>
  <data name="AddItem" xml:space="preserve">
    <value>Add a Department</value>
  </data>
  <data name="AddSchool" xml:space="preserve">
    <value>Add new school</value>
  </data>
  <data name="AllDepartments" xml:space="preserve">
    <value>All Departments</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="CourseCode" xml:space="preserve">
    <value>Class code</value>
  </data>
  <data name="CourseName" xml:space="preserve">
    <value>Class Name</value>
  </data>
  <data name="CreateCourse" xml:space="preserve">
    <value>Create a new class</value>
  </data>
  <data name="EmptyLib" xml:space="preserve">
    <value>No departments or classes have been added yet.

                Be the first to create them.</value>
  </data>
  <data name="Erase" xml:space="preserve">
    <value>Erase</value>
  </data>
  <data name="FillGap" xml:space="preserve">
    <value>Fill in the gap</value>
  </data>
  <data name="Follow" xml:space="preserve">
    <value>Join</value>
  </data>
  <data name="Following" xml:space="preserve">
    <value>Member</value>
  </data>
  <data name="Instructor" xml:space="preserve">
    <value>Instructor</value>
  </data>
  <data name="MobileNoResult" xml:space="preserve">
    <value>Your search did not produce any results</value>
  </data>
  <data name="NoResult" xml:space="preserve">
    <value>Your search for {0} did not produce any results.</value>
  </data>
  <data name="RelevantMaterial" xml:space="preserve">
    <value>To see the material relevant to you</value>
  </data>
  <data name="SearchSchool" xml:space="preserve">
    <value>Search for a school or choose from list</value>
  </data>
  <data name="SomethingMissing" xml:space="preserve">
    <value>Something missing?</value>
  </data>
  <data name="Students" xml:space="preserve">
    <value>students</value>
  </data>
  <data name="ThisDepartment" xml:space="preserve">
    <value>this Department</value>
  </data>
  <data name="TryAgain" xml:space="preserve">
    <value>Please try again using different keywords.</value>
  </data>
  <data name="WelcomeAcademic" xml:space="preserve">
    <value>Choose your school</value>
  </data>
  <data name="SchoolsFrom" xml:space="preserve">
    <value>Schools from</value>
  </data>
  <data name="CantFind" xml:space="preserve">
    <value>Can't find your school?</value>
  </data>
  <data name="SearchFor" xml:space="preserve">
    <value>Search for your school</value>
  </data>
  <data name="ChooseSchool" xml:space="preserve">
    <value>Please complete registration by filing in the following information</value>
  </data>
  <data name="WelcomeTo" xml:space="preserve">
    <value>Welcome to Cloudents!</value>
  </data>
  <data name="Student" xml:space="preserve">
    <value>student</value>
  </data>
  <data name="FriendsRegistered" xml:space="preserve">
    <value>of your friends are registered</value>
  </data>
  <data name="CantFindDept" xml:space="preserve">
    <value>Can't find your department?</value>
  </data>
  <data name="CreateNewDept" xml:space="preserve">
    <value>Create a new department</value>
  </data>
  <data name="OfYourFriends" xml:space="preserve">
    <value>of your friends are registered</value>
  </data>
  <data name="UploadLogo" xml:space="preserve">
    <value>Upload school logo</value>
  </data>
  <data name="YouStudyAt" xml:space="preserve">
    <value>You study at </value>
  </data>
  <data name="Courses" xml:space="preserve">
    <value>Classes</value>
  </data>
  <data name="CanConfuse" xml:space="preserve">
    <value>Make sure you select a proper name.
Changing a name my confuse your classmates.</value>
  </data>
  <data name="ChangeName" xml:space="preserve">
    <value>Change department name</value>
  </data>
  <data name="DeleteDept" xml:space="preserve">
    <value>Delete Department</value>
  </data>
  <data name="DeptSettings" xml:space="preserve">
    <value>Department Settings</value>
  </data>
  <data name="MarkToDelete" xml:space="preserve">
    <value>Mark to delete this department</value>
  </data>
</root>