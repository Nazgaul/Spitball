
@using Cloudents.Web.Middleware
@using Cloudents.Web.Services
@using Cloudents.Web.Views
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Configuration
@inject Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration JavaScriptSnippetTelemetry
@inject IWebHostEnvironment Environment
@inject WebPackChunkName Provider
@inject IConfiguration Configuration
@inject ConfigurationService VersionService
@inject IViewLocalizer Localizer

@{
    //var p = Provider.GetVendorTag();
    var cdnEndPoint = Constants.GetCdnEndpoint(Configuration);
    var isAuth = User.Identity.IsAuthenticated;
    var result = System.Threading.Thread.CurrentThread.CurrentUICulture.TextInfo.IsRightToLeft ? "rtl" : "ltr";


    ViewBag.title = ViewBag.title ?? Localizer["Title"];
    ViewBag.metaDescription = ViewBag.metaDescription ?? Localizer["MetaDescription"];
}
<!DOCTYPE html>


<html dir="@result" lang="@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName">
<head>
    <title>@ViewBag.title</title>
    <meta name="title" content="@ViewBag.title" />
    <meta name="description" content="@ViewBag.metaDescription" />
    <meta charset="utf-8">
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
    <base href="~/" />
    @if (!string.Equals(@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName, "he", StringComparison.OrdinalIgnoreCase))
    {
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,700&display=swap">
    }

    @await RenderSectionAsync("styleSection", required: false)
    @try
    {
        @await Html.PartialAsync($"_{VersionService.GetSiteName().ToString("G")}HeadTags", cdnEndPoint);
    }
    catch (InvalidOperationException)
    {
        @await Html.PartialAsync("_SpitballTags");
    }

    @*@Html.Raw(JavaScriptSnippet.FullScript)*@
    @*@Html.Raw(ClickJackingTagHelper.FullScript)*@

    @if (ViewBag.jsonLd != null)
    {
        <script type="application/ld+json">
            @Html.Raw(ViewBag.jsonLd.ToHtmlEscapedString())
        </script>
    }

    <style>
        body {
            margin: 0;
        }
    </style>
</head>
<body lang="@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName">
    @RenderBody()
    <script id="global">
        window.version = '@VersionService.GetVersion()';
        window.publicPath = '@cdnEndPoint' + '/dist/';
        window.functionApp = '@Configuration["functionCdnEndpoint"]';
        window.isAuth = @isAuth.ToString().ToLower();
        window.siteName = '@VersionService.GetSiteName().ToString("G").ToLowerInvariant()';
        window.applicationId = '@JavaScriptSnippetTelemetry.InstrumentationKey';
        window.paypalClientId = '@Configuration["PayPal:ClientId"]';
    </script>
    @await Component.InvokeAsync("Country")
    @await RenderSectionAsync("scripts", required: false)

    @try
    {
        @await Html.PartialAsync($"_{VersionService.GetSiteName().ToString("G")}Scripts");

    }
    catch (InvalidOperationException)
    {
        @await Html.PartialAsync("_SpitballScripts");
    }
</body>
</html>
