@using System.Collections
@using System.Globalization
@using System.Reflection
@using System.Resources
@using Newtonsoft.Json

@{
    var q = from t in Assembly.GetExecutingAssembly().GetTypes()
            where t.IsClass && t.Namespace == "Cloudents.Web.Resources.Js"
            select t;

    var assembly = Assembly.GetAssembly(typeof(Cloudents.Web.Resources.Js.QuestionResource));

    var resources = assembly.GetManifestResourceNames();

    var dic = new Dictionary<string, string>();
    foreach (var rawResourceLocation in resources.Where(w => w.Contains("Cloudents.Web.Resources.Js")))
    {
        var resourceStr = rawResourceLocation.Substring(0, rawResourceLocation.LastIndexOf('.'));
        var resource = new ResourceManager(resourceStr, assembly);
        var resourceSet = resource.GetResourceSet(CultureInfo.CurrentUICulture, true, true);

        var p = resourceSet.Cast<DictionaryEntry>()
    .ToDictionary(x => x.Key.ToString(),
        x => x.Value.ToString());


        var t = resourceStr.Replace("Cloudents.Web.Resources.Js.",string.Empty);
        foreach (var val in p) {
            dic.Add($"{t}_{val.Key}", val.Value);

        }
    }
    var jsonString = JsonConvert.SerializeObject(dic);
    <script>window.loc =  @Html.Raw(jsonString)</script>
}

