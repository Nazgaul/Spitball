<template>
  <v-layout class="profile-bio" align-center>
    <v-flex xs12>
      <v-card
        class="profile-bio-card"
        :class="[$vuetify.breakpoint.smAndUp ?  'pl-4 px-3 py-4' : 'px-1 mt-2 transparent elevation-0 py-1']"
      >
        <v-layout
          v-bind="xsColumn"
          :class="[$vuetify.breakpoint.smAndUp ? 'align-start' : 'align-center' ]"
        >
          <v-flex order-xs2 order-sm1>
            <user-image :isMyProfile="isMyProfile"></user-image>
          </v-flex>
          <v-flex
            xs12
            order-xs1
            order-sm2
            :class="[$vuetify.breakpoint.smAndUp ?  'pl-4' : 'mb-4']">
            <v-layout class="name-price-wrap" justify-space-between>
              <v-flex>
                <div class="user-name mb-2">
                  <div class="align-start d-flex">
                    <v-icon
                      v-if="$vuetify.breakpoint.xsOnly && isTutorProfile"
                      class="face-icon mr-2"
                    >sbf-face-icon</v-icon>
                    <h1 
                      class="subheading font-weight-bold lineClamp"
                      :style="[{wordBreak: 'break-all'},{maxWidth: $vuetify.breakpoint.xsOnly? '180px':'inherit'}]"
                    >{{userName}}</h1>
                    <v-icon
                      @click="openEditInfo()"
                      v-if="$vuetify.breakpoint.xsOnly && isMyProfile"
                      class="edit-profile-action ml-2 "
                    >sbf-edit-icon</v-icon>
                  </div>
                </div>
                <h2 class="text-xs-center text-sm-left user-university caption text-capitalize">{{university}}</h2>
              </v-flex>
              <div class="tutor-price tutor-price-header mr-3">
                <div class="tutor-price-header-wrap">
                  <span class="tutor-price mx-2" v-if="$vuetify.breakpoint.smAndUp && isTutorProfile">
                    {{isDiscount && tutorPrice !== 0  ? tutorDiscountPrice : tutorPrice | currencyFormat(getProfile.user.tutorData.currency)}}
                    <span class="tutor-price small-text">/ <span v-language:inner>profile_points_hour</span>
                    </span>
                  </span>
                  <div v-if="isDiscount && $vuetify.breakpoint.smAndUp">
                    <div class="tutor-price strike-through mr-3">
                      <span class="tutor-price" v-if="$vuetify.breakpoint.smAndUp && isTutorProfile">
                        {{tutorPrice ? tutorPrice : tutorDiscountPrice | currencyFormat(getProfile.user.tutorData.currency)}}
                        <span class="tutor-price small-text">/<span v-language:inner>profile_points_hour</span></span>
                      </span>
                    </div>
                  </div>
                  <span class="mt-0 ml-2" v-if="$vuetify.breakpoint.smAndUp && isMyProfile">
                    <v-icon
                      @click="openEditInfo()"
                      class="edit-profile-action subheading"
                    >sbf-edit-icon</v-icon>
                  </span>
                </div>
                <template class="hidden-sm-and-down">
                  <button class="profile-coupon_apply hidden-sm-and-down body-2" :class="{'d-block': !$vuetify.breakpoint.xsOnly}" @click="openCoupon" flat v-language:inner="'coupon_apply_coupon'" v-if="isTutorProfile && !isMyProfile && !hasCoupon"></button>
                </template>
              </div>
            </v-layout>
            <div class="mt-5" v-if="$vuetify.breakpoint.smAndUp">
              <userAboutMessage></userAboutMessage>
            </div>
          </v-flex>
        </v-layout>
        <v-flex style="position:relative;">
          <div
            class="tutor-price text-xs-center"
            v-if="$vuetify.breakpoint.xsOnly && isTutorProfile"
          >
            <div class="tutor-price-mobile">
              <span class="tutor-price">
                {{isDiscount && tutorPrice !== 0 ? tutorDiscountPrice : tutorPrice | currencyFormat(getProfile.user.tutorData.currency)}}
                <span class="tutor-price small-text">
                  <span>/</span>
                  <span v-language:inner>profile_points_hour</span>
                </span>
              </span>
              <div class="tutor-price strike-through mr-3" v-if="isDiscount">
                <span class="tutor-price">
                  {{tutorPrice ? tutorPrice : tutorDiscountPrice | currencyFormat(getProfile.user.tutorData.currency)}}
                  <span class="tutor-price small-text">/<span v-language:inner>profile_points_hour</span></span>
                </span>
              </div>
            </div>
            <template class="hidden-sm-and-up">  
<<<<<<< HEAD
              <button class="profile-coupon_apply d-block body-2 mt-2" :class="{'profile-coupon_apply__mobile': $vuetify.breakpoint.xsOnly}" @click="openCoupon" flat v-language:inner="'coupon_apply_coupon'" v-if="isTutorProfile && !isMyProfile && !hasCoupon"></button>
=======
              <button class="profile-coupon_apply d-block body-2 mt-2" :class="{'profile-coupon_apply__mobile': $vuetify.breakpoint.xsOnly}" @click="openCoupon" flat v-language:inner="'coupon_apply_coupon_btn'" v-if="isTutorProfile && !isMyProfile && !hasCoupon"></button>
>>>>>>> origin/develop
            </template>
            <span
              class="divider mt-4"
              style="height: 2px; width: 44px; background-color: rgba(67, 66, 93, 0.2); margin: 0 auto; display: block"
            ></span>
          </div>
          <div
            class="tutor-price strike-through text-xs-center"
            v-if="$vuetify.breakpoint.xsOnly && isTutorProfile && showStriked"
          >
            <span class="tutor-price">
              {{tutorPrice}}
              <span class="tutor-price small-text">
                <span v-language:inner>profile_points_hour</span>
              </span>
            </span>
          </div>
        </v-flex>
        <v-flex>
          <div class="mt-4" v-if="$vuetify.breakpoint.xsOnly">
            <userAboutMessage></userAboutMessage>
          </div>
        </v-flex>
      </v-card>
    </v-flex>
    <sb-dialog
      :onclosefn="closeEditDialog"
      :activateOverlay="false"
      :showDialog="getShowEditDataDialog"
      :maxWidth="'760px'"
      :popUpType="'editUserInfo'"
      :content-class="'edit-dialog'"
      :isPersistent="true"
    >
      <tutorInfoEdit v-if="isTutorProfile" :closeCallback="closeEditDialog"></tutorInfoEdit>
      <userInfoEdit v-else :closeCallback="closeEditDialog"></userInfoEdit>
    </sb-dialog>
    <sb-dialog
      :onclosefn="closeCouponDialog"
      :activateOverlay="false"
      :showDialog="getCouponDialog"
      :maxWidth="'300px'"
      :popUpType="'coupon'"
      :content-class="'coupon-dialog'"
      :isPersistent="true"
    >
        <v-card class="pb-3" :class="{'d-block': $vuetify.breakpoint.xsOnly}">
            <v-layout class="header pa-3 mb-2">
                <v-flex class="text-xs-center coupon-dialog-header">
                    <span v-language:inner="'coupon_title'"></span>
                    <v-icon @click="closeCouponDialog" class="coupon-close" v-html="'sbf-close'" />
                </v-flex>
            </v-layout>
            <v-layout class="px-3" column>
                <v-flex class="mb-2 pl-2">
                    <div class="coupon coupon__dialog" v-if="isTutorProfile && !isMyProfile">
                      <div class="text-xs-right ">
                        <div class="coupon__dialog--flex">
                          <input type="text" v-model="coupon" :placeholder="couponPlaceholder" class="profile-coupon_input">
                          <button class="profile-coupon_btn white--text" @click="applyCoupon" v-language:inner="'coupon_apply_btn'"></button>
                        </div>
                        <div class="profile-coupon_error" v-language:inner="'coupon_apply_error'" v-if="getCouponError"></div>
                        </div>
                    </div>
                </v-flex>
            </v-layout>
        </v-card>
    </sb-dialog>
  </v-layout>
</template>

<script>
import { mapGetters, mapActions } from "vuex";

import storeService from '../../../../services/store/storeService';
import couponStore from '../../../../store/couponStore';

import userImage from "./bioParts/userImage/userImage.vue";
import userAboutMessage from "./bioParts/userAboutMessage.vue";
import userInfoEdit from "../../profileHelpers/userInfoEdit/userInfoEdit.vue";
import tutorInfoEdit from "../../profileHelpers/userInfoEdit/tutorInfoEdit.vue";
import sbDialog from "../../../wrappers/sb-dialog/sb-dialog.vue";
import { LanguageService } from '../../../../services/language/languageService';

import sbClose from '../../../../font-icon/close.svg';
export default {
  name: "profileBio",
  components: {
    userImage,
    userAboutMessage,
    userInfoEdit,
    tutorInfoEdit,
    sbDialog,
    sbClose
  },
  data() {
    return {
      coupon: '',
      discountAmount:70,
      minimumPrice:55
    };
  },
  props: {
    isMyProfile: {
      type: Boolean,
      default: false
    }
  },
  computed: {
<<<<<<< HEAD
    ...mapGetters(["accountUser", "getProfile", "isTutorProfile", "getShowEditDataDialog", "getActivateTutorDiscounts", 'getCouponError', 'getCouponDialog']),
=======
    ...mapGetters(["getProfile", "isTutorProfile", "getShowEditDataDialog", "getActivateTutorDiscounts", 'getCouponError', 'getCouponDialog']),
>>>>>>> origin/develop
    xsColumn() {
      const xsColumn = {};
      if (this.$vuetify.breakpoint.xsOnly) {
        xsColumn.column = true;
      }
      return xsColumn;
    },
    tutorPrice() {
      if (
        this.getProfile &&
        this.getProfile.user &&
        this.getProfile.user.tutorData
      ) {
        return this.getProfile.user.tutorData.price;
      }
      return 0;
    },
    tutorDiscountPrice() {
      return this.getProfile && this.getProfile.user.tutorData.discountPrice ? this.getProfile.user.tutorData.discountPrice : null;
    },
    hasCoupon() {
      return this.getProfile && this.getProfile.user.tutorData.hasCoupon ? this.getProfile.user.tutorData.hasCoupon : false;
    },
    isDiscount() {
      return this.getProfile && (this.getProfile.user.tutorData.discountPrice || this.getProfile.user.tutorData.discountPrice === 0) ? true : false;
    },
    showStriked(){
      if(!this.getActivateTutorDiscounts) return false;
      let price = this.tutorPrice;
      return price > this.minimumPrice;
    },
    discountedPrice(){
      let price = this.tutorPrice;
      let discountedAmount = price - this.discountAmount;
      return discountedAmount > this.minimumPrice ? discountedAmount.toFixed(0) : this.minimumPrice.toFixed(0);
    },
    university() {
      if (this.getProfile && this.getProfile.user) {
        return this.getProfile.user.universityName;
      }
    },
    userName() {
      if (this.isTutorProfile) {
        if (
          this.getProfile &&
          this.getProfile.user &&
          this.getProfile.user.tutorData
        ) {
          return `${this.getProfile.user.tutorData.firstName} ${this.getProfile.user.tutorData.lastName}`;
        }
      } else {
        if (this.getProfile && this.getProfile.user) {
          return this.getProfile.user.name;
        }
      }
    },
    userScore() {
      if (this.getProfile && this.getProfile.user) {
        return this.getProfile.user.score;
      }
    },
    couponPlaceholder() {
      return LanguageService.getValueByKey('coupon_placeholder')
    }
  },
  methods: {
<<<<<<< HEAD
    ...mapActions(['updateEditDialog', 'updateCoupon', 'updateCouponDialog', 'updateLoginDialog']),
=======
    ...mapActions(['updateEditDialog', 'updateCoupon', 'updateCouponDialog']),
>>>>>>> origin/develop
    openEditInfo() {
      this.updateEditDialog(true);
    },
    closeEditDialog() {
        this.updateEditDialog(false);
    },
    closeCouponDialog() {
        this.updateCouponDialog(false);
    },
    openCoupon() {
<<<<<<< HEAD
      if(this.accountUser == null) {
        this.updateLoginDialog(true);
        return;
      } 
=======
>>>>>>> origin/develop
      this.updateCouponDialog(true)
    },
    applyCoupon() {
      if(this.isTutorProfile) {
        let tutorId = this.getProfile.user.id;
        let coupon = this.coupon;
        this.updateCoupon({coupon, tutorId}).finally(() => {
          this.coupon = ''
        })
      }
    }
  },
  beforeDestroy(){
    storeService.unregisterModule(this.$store, 'couponStore');
    
  },
  created() {
    storeService.lazyRegisterModule(this.$store, 'couponStore', couponStore); 
  }
};
</script>

<style lang="less">
@import "../../../../styles/mixin.less";

.profile-bio {
  max-width: 760px;
  .profile-bio-card {
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.18);
    border-radius: 4px;

    .name-price-wrap {
      .tutor-price-header {
        display: flex;
        flex-direction: column;
        .tutor-price-header-wrap {
          display: flex;
        }
        .profile-coupon_apply  {
          margin: 0 0 0 auto;
        }
      }
    }
  }
  .profile-coupon_apply {
    color: #4c59ff;
    &__mobile {
      margin: 0 auto;
    }
  }
  .user-name {
    display: flex;
    flex-direction: row;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
    letter-spacing: -0.4px;
    color: @global-purple;
    @media (max-width: @screen-xs) {
      justify-content: center;
    }
    .face-icon {
      font-size: 18px;
      color: @global-purple;
    }
    .lineClamp{
      .lineClamp()
    }
  }
  .profile-coupon {
    display: flex;
    justify-content: flex-end;
    .profile-coupon_input {
      outline: none;
      border-radius: 6px 0 0 6px;
      width: 135px;
      border: 1px solid #bbb;
      padding: 5px 2px 7px 8px; 
      margin-right: -5px;
    }
    .profile-coupon_btn {
      border-radius: 0 6px 6px 0;
      background-color: #4c59ff;
      font-size: 12px;
      padding: 8px;
      font-weight: 600;
      outline: none;
    }
    .profile-coupon_error {
      width: 200px;
      margin: 4px 0 0 auto;
      text-align: left;
      font-size: 11px;
      color: #ff5252;
    }
  }
  .tutor-price {
    font-weight: bold;
    font-size: 20px;
    flex-shrink: 0;
    color: @global-purple;
    @media (max-width: @screen-xs) {
      font-size: 26px;
    }
    .small-text {
      font-size: 13px;
    }
    &.strike-through{
      position: relative;
        @media (max-width: @screen-xs) {
          top: 20px;
          right: 0px;
          left: 0;
          width: 25%;
          margin: 0 auto;
        }
      
      .tutor-price{
        font-size: 14px;
        font-weight: normal;
        color: #ccc;
        .small-text{
          font-size: 11px;
        }
      }
      &:after {
        content: '';
        width: 100%;
        border-bottom: solid 1px #aaa;
        position: absolute;
        left: 0;
        top: 60%;
        z-index: 1;
        @media (max-width: @screen-xs) {
          top: 30%
        }
      }
    }
  .edit-profile-action {
    color: @purpleLight;
    opacity: 0.41;
    font-size: 20px;
    cursor: pointer;
    vertical-align: baseline;
    @media (max-width: @screen-xs) {
      color: @purpleDark;
      font-size: 16px;
    }
  }
  .line-height-1 {
    line-height: 1;
  }
  .user-university {
    font-size: 14px;
    letter-spacing: -0.3px;
    color: @textColor;
  }
}
.tutor-price-mobile {
  display: flex;
  justify-content: center;
  .tutor-price {
    margin-right: 4px;
    &.strike-through {
      margin: 0 !important;
      top: 0;
    &:after {
      top: 64%;
    }
    }
  }
}

}
.coupon-dialog {
  border-radius: 6px;
  background: white;
  display: flex;
  flex-direction: column;
  .coupon-dialog-header {
    font-weight: 600;
    font-size: 16px;
    color: #43425d;
    .coupon-close {
      position: absolute;
      right: 10px;
      top: 10px;
      font-size: 12px;
      fill: #adadba;
      cursor: pointer;
    }
  }
  .coupon {
    display: flex;
    width: 100%;
    justify-content: center;
    &__dialog {
      &--flex {
        display: flex;
      }
      .profile-coupon_input {
    outline: none;
    border-radius: 6px 0 0 6px;
    width: 146px;
    border: 1px solid #bbb;
    padding: 5px 2px 7px 8px; 
    margin-right: -5px;
  }
  .profile-coupon_btn {
    border-radius: 0 6px 6px 0;
    background-color: #4c59ff;
    font-size: 12px;
    padding: 8px 12px;
    font-weight: 600;
    outline: none;
  }
  .profile-coupon_error {
    width: 200px;
    margin: 4px 0 0 auto;
    text-align: left;
    font-size: 11px;
    color: #ff5252;
  }
    }
  }
}
</style>