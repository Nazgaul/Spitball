<template>
    <v-layout
            row
            class="tutoring-page"
            :style="{'background-size': zoom, 'background-position-x': panX, 'background-position-y': panY}"
            :class="{'gridBackground': $route.name === 'tutoring'} "
    >
        <v-flex>
            <nav class="tutoring-navigation">
                <div class="logo-nav-wrap">
          <span class="logo-container">
            <AppLogo></AppLogo>
          </span>
<<<<<<< HEAD
          <div
            class="tutor-nav-item"
            v-for="singleNav in navs"
            :class="{ 'active-nav': singleNav.value === activeItem}"
          >
            <v-icon class="nav-icon" @click="updateActiveNav(singleNav.value)">{{singleNav.icon}}</v-icon>
            <a
              class="tutor-nav-item-link"
              @click="updateActiveNav(singleNav.value)"
            >{{singleNav.name}}</a>
          </div>
        </div>

        <div style="display: flex; align-items: center;">
          <share-screen-btn class="nav-share-btn"></share-screen-btn>
          <button class="outline-btn" @click="changeQualityDialogState(true)">
            <testIcon class="test-icon mr-1"></testIcon>
            <span v-language:inner>tutor_btn_system_check</span>
          </button>
          <div class="mr-4 pr-1 d-flex">
            <component
              v-if="localNetworkQuality"
              class="network-icon ml-3"
              :is="'signal_level_'+localNetworkQuality"
            ></component>
          </div>
        </div>
      </nav>
      <transition name="slide-x-transition">
        <keep-alive>
          <component :is="activeItem" :roomId="id"></component>
        </keep-alive>
      </transition>
    </v-flex>
    <v-layout column align-start class="video-stream-wraper">
      <v-flex xs6 sm6 md6>
        <video-stream :id="id"></video-stream>
      </v-flex>
=======
                    <div
                            class="tutor-nav-item"
                            v-for="singleNav in navs"
                            :class="{ 'active-nav': singleNav.value === activeItem}"
                    >
                        <v-icon class="mr-2" @click="updateActiveNav(singleNav.value)">{{singleNav.icon}}</v-icon>
                        <a
                                class="tutor-nav-item-link"
                                @click="updateActiveNav(singleNav.value)"
                        >{{singleNav.name}}</a>
                    </div>
                </div>
                <div style="display: flex; align-items: center;">
                    <share-screen-btn class="nav-share-btn"></share-screen-btn>
                    <button class="outline-btn" @click="changeQualityDialogState(true)">
                        <testIcon class="test-icon mr-1"></testIcon>
                        System Check
                    </button>
                    <div class="mr-4 pr-1 d-flex">
                        <component
                                v-if="localNetworkQuality"
                                class="network-icon ml-3"
                                :is="'signal_level_'+localNetworkQuality"
                        ></component>
                    </div>
                </div>
            </nav>
            <transition name="slide-x-transition">
                <keep-alive>
                    <component :is="activeItem" v-if="showCurrentCondition"></component>
                </keep-alive>
            </transition>
        </v-flex>
        <v-layout column align-start style="position: fixed; right: 0; top: 60px;">
            <v-flex xs6 sm6 md6>
                <video-stream :id="id"></video-stream>
            </v-flex>
        </v-layout>

        <v-dialog
                v-model="qualityDialog"
                content-class="filter-dialog"
                :max-width="$vuetify.breakpoint.smAndUp ? '720px' : ''"
                :fullscreen="$vuetify.breakpoint.xsOnly"
                persistent
        >
            <quality-validation></quality-validation>
        </v-dialog>

        <sb-dialog :showDialog="getReviewDialogState"
                   :transitionAnimation="$vuetify.breakpoint.smAndUp ? 'slide-y-transition' : 'slide-y-reverse-transition'"
                   :popUpType="'reviewDilaog'"
                   :maxWidth="'596'"
                   :onclosefn="closeReviewDialog"
                   :activateOverlay="false"
                   :isPersistent="$vuetify.breakpoint.smAndUp"
                   :content-class="'review-dialog'">
            <leave-review></leave-review>
        </sb-dialog>
>>>>>>> feature-tutorReview
    </v-layout>
</template>
<script>
<<<<<<< HEAD
import initSignalRService from '../../services/signalR/signalrEventService'
import { mapActions, mapGetters } from "vuex";
import videoStream from "./videoStream/videoStream.vue";
import whiteBoard from "./whiteboard/WhiteBoard.vue";
import codeEditor from "./codeEditor/codeEditor.vue";
import qualityValidation from "./tutorHelpers/qualityValidation/qualityValidation.vue";
import sharedDocument from "./sharedDocument/sharedDocument.vue";
import shareScreenBtn from "./tutorHelpers/shareScreenBtn.vue";
import AppLogo from "../../../wwwroot/Images/logo-spitball.svg";
import testIcon from "./images/eq-system.svg";
import signal_level_0 from "./images/wifi-0.svg";
import signal_level_1 from "./images/wifi-1.svg";
import signal_level_2 from "./images/wifi-2.svg";
import signal_level_3 from "./images/wifi-3.svg";
import signal_level_4 from "./images/wifi-4.svg";
import signal_level_5 from "./images/wifi-4.svg";
import tutorService from "./tutorService";
import chatService from "../../services/chatService";
import { LanguageService } from "../../services/language/languageService";
export default {
  components: {
    videoStream,
    whiteBoard,
    codeEditor,
    sharedDocument,
    shareScreenBtn,
    AppLogo,
    qualityValidation,
    testIcon,
    signal_level_0,
    signal_level_1,
    signal_level_2,
    signal_level_3,
    signal_level_4,
    signal_level_5
  },
  name: "tutor",
  data() {
    return {
      activeNavItem: "white-board",
      showQualityDialog: false,
      showContent: false,
      navs: [
        { name: LanguageService.getValueByKey("tutor_nav_canvas"), value: "white-board", icon: "sbf-canvas" },
        { name: LanguageService.getValueByKey("tutor_nav_code"), value: "code-editor", icon: "sbf-code-editor" },
        { name: LanguageService.getValueByKey("tutor_nav_text"), value: "shared-document", icon: "sbf-text-icon" }
      ],
    };
  },

  props: {
    id: ""
  },
  computed: {
    ...mapGetters([
      "qualityDialog",
      "localNetworkQuality",
      "isRoomCreated",
      "sharedDocUrl",
      "getZoom",
      "getPanX",
      "getPanY"
    ]),
    activeItem() {
      return this.activeNavItem;
    },
    showCurrentCondition() {
      return this.activeItem === "white-board" ? true : true;
    },
    zoom() {
      let gridSize = (40 * Number(this.getZoom.toFixed())) / 100;
      return `${gridSize}px ${gridSize}px`;
    },
    panX() {
      return `${this.getPanX}px`;
    },
    panY() {
      return `${this.getPanY}px`;
    }
  },
  methods: {
    ...mapActions([
      "updateTestDialogState",
      "setActiveConversationObj",
      "getChatById",
      "lockChat",
      "updateRoomID",
      "updateStudyRoomProps"
    ]),
    updateActiveNav(value) {
      this.activeNavItem = value;
      console.log(this.activeItem);
    },
    changeQualityDialogState(val) {
      this.updateTestDialogState(val);
    },
=======
    import initSignalRService from '../../services/signalR/signalrEventService';
    import { mapActions, mapGetters } from "vuex";
    import videoStream from "./videoStream/videoStream.vue";
    import whiteBoard from "./whiteboard/WhiteBoard.vue";
    import codeEditor from "./codeEditor/codeEditor.vue";
    import qualityValidation from "./tutorHelpers/qualityValidation/qualityValidation.vue";
    import sharedDocument from "./sharedDocument/sharedDocument.vue";
    import shareScreenBtn from "./tutorHelpers/shareScreenBtn.vue";
    import AppLogo from "../../../wwwroot/Images/logo-spitball.svg";
    import testIcon from "./images/eq-system.svg";
    import signal_level_0 from "./images/wifi-0.svg";
    import signal_level_1 from "./images/wifi-1.svg";
    import signal_level_2 from "./images/wifi-2.svg";
    import signal_level_3 from "./images/wifi-3.svg";
    import signal_level_4 from "./images/wifi-4.svg";
    import signal_level_5 from "./images/wifi-4.svg";
    import tutorService from "./tutorService";
    import chatService from "../../services/chatService";
    import sbDialog from '../wrappers/sb-dialog/sb-dialog.vue';
    import leaveReview from './tutorHelpers/leaveReview/leaveReview.vue';

    export default {
        components: {
            videoStream,
            whiteBoard,
            codeEditor,
            sharedDocument,
            shareScreenBtn,
            AppLogo,
            qualityValidation,
            testIcon,
            signal_level_0,
            signal_level_1,
            signal_level_2,
            signal_level_3,
            signal_level_4,
            signal_level_5,
            sbDialog,
            leaveReview
        },
        name: "tutor",
        data() {
            return {
                activeNavItem: "white-board",
                showQualityDialog: false,
                showContent: false,
                navs: [
                    {name: "Canvas", value: "white-board", icon: "sbf-canvas"},
                    {name: "Code Editor", value: "code-editor", icon: "sbf-code-editor"},
                    {name: "Text Editor", value: "shared-document", icon: "sbf-text-icon"}
                ],
            };
        },

        props: {
            id: ""
        },
        computed: {
            ...mapGetters([
                              "qualityDialog",
                              "localNetworkQuality",
                              "isRoomCreated",
                              "sharedDocUrl",
                              "getZoom",
                              "getPanX",
                              "getPanY",
                              "getReviewDialogState"
                          ]),
            activeItem() {
                return this.activeNavItem;
            },
            showCurrentCondition() {
                return this.activeItem === "white-board" ? true : this.isRoomCreated;
            },
            zoom() {
                let gridSize = (40 * Number(this.getZoom.toFixed())) / 100;
                return `${gridSize}px ${gridSize}px`;
            },
            panX() {
                return `${this.getPanX}px`;
            },
            panY() {
                return `${this.getPanY}px`;
            }
        },
        methods: {
            ...mapActions([
                              "updateTestDialogState",
                              "setActiveConversationObj",
                              "getChatById",
                              "lockChat",
                              "updateStudyRoomProps",
                              "updateReviewDialog",
                              "updateReview",
                              "submitReview"
                          ]),
            closeReviewDialog() {
                this.updateReviewDialog(false);
            },
            updateActiveNav(value) {
                this.activeNavItem = value;
                console.log(this.activeItem);
            },
            changeQualityDialogState(val) {
                this.updateTestDialogState(val);
            },
>>>>>>> feature-tutorReview

            setStudyRoom(id) {
                let self = this;
                tutorService.getRoomInformation(id).then(({data}) => {
                    initSignalRService(`studyRoomHub?studyRoomId=${id}`);
                    let roomData =  { ...data, roomId: id };
                    this.updateStudyRoomProps(roomData);
                    self.getChatById(data.conversationId).then(({data}) => {
                        let currentConversationObj = chatService.createActiveConversationObj(data);
                        self.setActiveConversationObj(currentConversationObj);
                        self.lockChat();
                    });
                });
            }
        },
        created() {
            this.setStudyRoom(this.id);
            this.$loadScript(
                "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS_SVG"
            ).then(() => {
                MathJax.Hub.Config({
                                       showMathMenu: false,
                                       SVG: {
                                           useGlobalCache: false,
                                           useFontCache: false
                                       }
                                   });
                MathJax.AuthorInit = function (texstring, callback) {
                    var input = texstring;
                    var wrapper = document.createElement("div");
                    wrapper.innerHTML = input;
                    var output = {svg: ""};
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub, wrapper]);
                    MathJax.Hub.Queue(function () {
                        var mjOut = wrapper.getElementsByTagName("svg")[0];
                        if(!mjOut) {
                            return null;
                        }
                        mjOut.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                        output.svg = mjOut.outerHTML;
                        callback(output);
                    });
                };
                //MathJax.Message.Log()
            });
            console.log("ID Tutor!!", this.id);
            global.onbeforeunload = function () {
                return "Are you sure you want to close the window?";
            };
        }
    };
</script>

<style lang="less" src="./tutor.less"></style>