<<<<<<< HEAD
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
=======
﻿using System.Threading;
using System.Threading.Tasks;
using Cloudents.Core.Interfaces;
>>>>>>> origin/develop
using Cloudents.Query;
using Cloudents.Query.Query;
using Cloudents.Web.Controllers;
using FluentAssertions;
<<<<<<< HEAD
using Microsoft.AspNetCore.Mvc.Testing;
using Moq;
using Xunit;

namespace Cloudents.Web.Test.IntegrationTests
=======
using Moq;
using Xunit;

namespace Cloudents.Web.Test.UnitTests
>>>>>>> origin/develop
{
    public class GoControllerTests
    {
        private readonly Mock<IQueryBus> _queryBusMoq = new Mock<IQueryBus>();
<<<<<<< HEAD
=======
        private readonly Mock<IGoogleAnalytics> _GoogleAnalyticsMoq = new Mock<IGoogleAnalytics>();
>>>>>>> origin/develop
       
        public GoControllerTests()
        {
           
       
        }

        [Fact]
        public async Task GetAsync_NoResult_RedirectBase()
        {
<<<<<<< HEAD
            var controller = new GoController(_queryBusMoq.Object);
            var result = await controller.Index("xxx", null, default);
=======
            var controller = new GoController(_queryBusMoq.Object, _GoogleAnalyticsMoq.Object);
            var result = await controller.Index("xxx", null, null, null, null, default);
>>>>>>> origin/develop
            result.Url.Should().Be("/");
        }


        [Fact]
        public async Task GetAsync_SomeIdentifier_Ok()
        {
            _queryBusMoq.Setup(s => s.QueryAsync(It.IsAny<ShortUrlQuery>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(new ShortUrlDto() {Destination = "/test"});

<<<<<<< HEAD
            var controller = new GoController(_queryBusMoq.Object);
            var result = await controller.Index("xxx", null, default);
=======
            var controller = new GoController(_queryBusMoq.Object, _GoogleAnalyticsMoq.Object);
            var result = await controller.Index("xxx", null, null, null, null, default);
>>>>>>> origin/develop
            result.Url.Should().Be("/test");
        }

        [Fact]
        public async Task GetAsync_SomeIdentifierWithoutQuerySite_Ok()
        {
            _queryBusMoq.Setup(s => s.QueryAsync(It.IsAny<ShortUrlQuery>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(new ShortUrlDto() { Destination = "/test" });

<<<<<<< HEAD
            var controller = new GoController(_queryBusMoq.Object);
            var result = await controller.Index("xxx", "frymo", default);
=======
            var controller = new GoController(_queryBusMoq.Object, _GoogleAnalyticsMoq.Object);
            var result = await controller.Index("xxx", "frymo", null, null, null, default);
>>>>>>> origin/develop
            result.Url.Should().Be("/test?site=frymo");
        }

        [Fact]
        public async Task GetAsync_SomeIdentifierWithQuerySite_Ok()
        {
            _queryBusMoq.Setup(s => s.QueryAsync(It.IsAny<ShortUrlQuery>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(new ShortUrlDto() { Destination = "/test?v=1" });

<<<<<<< HEAD
            var controller = new GoController(_queryBusMoq.Object);
            var result = await controller.Index("xxx", "frymo", default);
=======
            var controller = new GoController(_queryBusMoq.Object, _GoogleAnalyticsMoq.Object);
            var result = await controller.Index("xxx", "frymo",null,null,null, default);
>>>>>>> origin/develop
            result.Url.Should().Be("/test?v=1&site=frymo");
        }
    }
}
