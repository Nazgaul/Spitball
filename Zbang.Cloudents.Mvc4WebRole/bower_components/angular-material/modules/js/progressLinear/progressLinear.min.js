/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.3
 */
(function(n,t,i){"use strict";function r(n,r,u){function c(n){return n.attr("aria-valuemin",0),n.attr("aria-valuemax",100),n.attr("role","progressbar"),l}function l(c,l,a){function g(){a.$observe("value",function(n){var t=h(n);l.attr("aria-valuenow",t);p()!=o&&w(d,t)});a.$observe("mdBufferValue",function(n){w(k,h(n))});a.$observe("mdMode",function(n){switch(n){case o:case s:case f:case e:y.removeClass("ng-hide "+v);y.addClass(v="md-mode-"+n);break;default:y.removeClass(v);y.addClass("ng-hide");v=i}})}function nt(){if(t.isUndefined(a.mdMode)){var i=t.isDefined(a.value),n=i?f:e;u.debug(r.supplant("Auto-adding the missing md-mode='{0}' to the ProgressLinear element",[n]));l.attr("md-mode",n);a.mdMode=n}}function p(){var n=(a.mdMode||"").trim();if(n)switch(n){case f:case e:case s:case o:break;default:n=i}return n}function w(n,i){if(p()){var u=r.supplant("translateX({0}%) scale({1},1)",[(i-100)/2,i/100]),f=b({transform:u});t.element(n).css(f)}}n(l);var v,b=r.dom.animator.toCss,k=t.element(l[0].querySelector(".md-bar1")),d=t.element(l[0].querySelector(".md-bar2")),y=t.element(l[0].querySelector(".md-container"));l.attr("md-mode",p());nt();g()}function h(n){return Math.max(0,Math.min(n||0,100))}var f="determinate",e="indeterminate",s="buffer",o="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"><\/div><div class="md-bar md-bar1"><\/div><div class="md-bar md-bar2"><\/div><\/div>',compile:c}}t.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",r);r.$inject=["$mdTheming","$mdUtil","$log"]})(window,window.angular);