/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.3
 */
function MdProgressLinearDirective(n,t,i){function s(n){return n.attr("aria-valuemin",0),n.attr("aria-valuemax",100),n.attr("role","progressbar"),h}function h(s,h,c){function k(){c.$observe("value",function(n){var t=o(n);h.attr("aria-valuenow",t);v()!=f&&y(b,t)});c.$observe("mdBufferValue",function(n){y(w,o(n))});c.$observe("mdMode",function(n){switch(n){case f:case e:case r:case u:a.removeClass("ng-hide "+l);a.addClass(l="md-mode-"+n);break;default:a.removeClass(l);a.addClass("ng-hide");l=undefined}})}function d(){if(angular.isUndefined(c.mdMode)){var f=angular.isDefined(c.value),n=f?r:u;i.debug(t.supplant("Auto-adding the missing md-mode='{0}' to the ProgressLinear element",[n]));h.attr("md-mode",n);c.mdMode=n}}function v(){var n=(c.mdMode||"").trim();if(n)switch(n){case r:case u:case e:case f:break;default:n=undefined}return n}function y(n,i){if(v()){var r=t.supplant("translateX({0}%) scale({1},1)",[(i-100)/2,i/100]),u=p({transform:r});angular.element(n).css(u)}}n(h);var l,p=t.dom.animator.toCss,w=angular.element(h[0].querySelector(".md-bar1")),b=angular.element(h[0].querySelector(".md-bar2")),a=angular.element(h[0].querySelector(".md-container"));h.attr("md-mode",v());d();k()}function o(n){return Math.max(0,Math.min(n||0,100))}var r="determinate",u="indeterminate",e="buffer",f="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"><\/div><div class="md-bar md-bar1"><\/div><div class="md-bar md-bar2"><\/div><\/div>',compile:s}}goog.provide("ng.material.components.progressLinear");goog.require("ng.material.core");angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective);MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"];ng.material.components.progressLinear=angular.module("material.components.progressLinear");